package MainForm;

import DataBaseControl.DeckControl;
import DataBaseControl.DeleteActive;
import DataBaseControl.GetDeckList;
import DataBaseControl.SetActiveDeck;
import LogOn.StartForm;
import MainForm.Card.ViewCardForm;
import MainForm.ChangeProfile.ChangeNameDialog;
import MainForm.ChangeProfile.ChangePasswordDialog;
import MainForm.ChangeProfile.DeleteProfile;
import MainForm.ChangeProfile.ExitProfileDialog;
import MainForm.Learn.ChoiсeDialog;
import MainForm.Learn.LearnControl;
import MainForm.Learn.MemorizeControl;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Vector;

public class DeckForm extends JFrame {

    private JList DeckList;
    private JButton viewDeckButton;
    private JButton studyButton;
    private JPanel panel;
    private JButton createDeckButton;
    private JButton deleteDeckButton;
    private JButton continueButton;
    private JButton checkDeckButton;
    private JButton changeNameUserButton;
    private JButton changePasswordButton;
    private JButton DeleteProfileButton;
    private JButton ExitButton;
    private JFrame frame;


    private GetDeckList listDeck = new GetDeckList();
    private Vector<String> list;

    public DeckForm() {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension screenSize = tk.getScreenSize();
        list = listDeck.getDeck();
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                DeleteActive deleteActiveProfile = new DeleteActive();
                deleteActiveProfile.DeleteProfile();
                setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            }
        });
        setLocation(screenSize.width / 2 - 161, screenSize.height / 2 - 75);
        DeckList.setListData(list);

        setContentPane(panel);
        setVisible(true);
        frame = this;
        this.viewDeckButton.addActionListener(new viewDeckButtonListener());
        this.createDeckButton.addActionListener(new createDeckButtonListener());
        this.studyButton.addActionListener(new studyButtonListener());
        this.deleteDeckButton.addActionListener(new deleteDeckButtonListener());
        this.continueButton.addActionListener(new continueButtonListener());
        this.checkDeckButton.addActionListener(new checkDeckButtonListener());
        this.ExitButton.addActionListener(new ExitButtonListener());
        this.changeNameUserButton.addActionListener(new changeNameUserButtonListener());
        this.changePasswordButton.addActionListener(new changePasswordButtonListener());
        this.DeleteProfileButton.addActionListener(new DeleteProfileButtonListener());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(10, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel.setMaximumSize(new Dimension(324, 149));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(8, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Список колод");
        panel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        viewDeckButton = new JButton();
        viewDeckButton.setText("Просмотреть колоду");
        panel.add(viewDeckButton, new com.intellij.uiDesigner.core.GridConstraints(4, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        studyButton = new JButton();
        studyButton.setText("Учить колоду");
        panel.add(studyButton, new com.intellij.uiDesigner.core.GridConstraints(5, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 7, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        DeckList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        DeckList.setModel(defaultListModel1);
        scrollPane1.setViewportView(DeckList);
        createDeckButton = new JButton();
        createDeckButton.setText("Создать колоду");
        panel.add(createDeckButton, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteDeckButton = new JButton();
        deleteDeckButton.setText("Удалить колоду");
        panel.add(deleteDeckButton, new com.intellij.uiDesigner.core.GridConstraints(3, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        continueButton = new JButton();
        continueButton.setText("Продолжить обучение");
        panel.add(continueButton, new com.intellij.uiDesigner.core.GridConstraints(6, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        checkDeckButton = new JButton();
        checkDeckButton.setText("Проверить колоду");
        panel.add(checkDeckButton, new com.intellij.uiDesigner.core.GridConstraints(7, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        changeNameUserButton = new JButton();
        changeNameUserButton.setText("Изменить имя пользователя");
        panel.add(changeNameUserButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        changePasswordButton = new JButton();
        changePasswordButton.setText("Изменить пароль");
        panel.add(changePasswordButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ExitButton = new JButton();
        ExitButton.setText("Выйти из профиля");
        panel.add(ExitButton, new com.intellij.uiDesigner.core.GridConstraints(9, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        DeleteProfileButton = new JButton();
        DeleteProfileButton.setText("Удалить профиль");
        panel.add(DeleteProfileButton, new com.intellij.uiDesigner.core.GridConstraints(9, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }


    public class viewDeckButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            Object nameActiveDeck;
            nameActiveDeck = DeckList.getSelectedValue();
            if (nameActiveDeck == null) {
                ErrorMessageForm error = new ErrorMessageForm("Выберите колоду");
                error.pack();
                return;
            }
            SetActiveDeck setActiveDeck = new SetActiveDeck(nameActiveDeck, 1);
            if (setActiveDeck.check()) return;
            frame.setVisible(false);
            ViewCardForm viewCardForm = new ViewCardForm();
            viewCardForm.pack();
            viewCardForm.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    frame.setVisible(true);
                }
            });
        }
    }

    public class createDeckButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            CreateDeckDialog createDeckForm = new CreateDeckDialog();
            createDeckForm.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    list.clear();
                    list = listDeck.getDeck();
                    DeckList.setListData(list);
                }
            });
        }
    }

    public class ExitButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            ExitProfileDialog exitProfileDialog = new ExitProfileDialog();
            exitProfileDialog.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    frame.setVisible(false);
                }
            });

        }
    }

    public class changeNameUserButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            ChangeNameDialog changeNameDialog = new ChangeNameDialog();
            changeNameDialog.pack();
        }
    }

    public class changePasswordButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            ChangePasswordDialog change = new ChangePasswordDialog();
            change.pack();
        }
    }

    public class DeleteProfileButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
           DeleteProfile delete = new DeleteProfile();
           delete.pack();
           delete.addWindowListener(new WindowAdapter() {
               @Override
               public void windowClosed(WindowEvent e) {
                   frame.setVisible(false);
               }
           });
        }
    }



    public class studyButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            Object nameActiveDeck;
            nameActiveDeck = DeckList.getSelectedValue();
            if (nameActiveDeck == null) {
                ErrorMessageForm error = new ErrorMessageForm("Выберите колоду");
                error.pack();
                return;
            }
            frame.setVisible(false);
            SetActiveDeck setActiveDeck = new SetActiveDeck(nameActiveDeck, 1);
            if (setActiveDeck.check()) return;
            ChoiсeDialog choiсeDialog = new ChoiсeDialog(frame);
            choiсeDialog.Start();
            choiсeDialog.pack();
            choiсeDialog.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    if (choiсeDialog.getStop()) return;
                    if (choiсeDialog.getTypeLearn() == 0) {
                        MemorizeControl memorizeControl = new MemorizeControl(choiсeDialog.getTag(), 0, frame);
                    } else {
                        LearnControl learnControl = new LearnControl(choiсeDialog.getTag(), 0, frame);
                    }
                }
            });
        }
    }

    public class continueButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            Object nameActiveDeck;
            nameActiveDeck = DeckList.getSelectedValue();
            if (nameActiveDeck == null) {
                ErrorMessageForm error = new ErrorMessageForm("Выберите колоду");
                error.pack();
                return;
            }
            frame.setVisible(false);
            SetActiveDeck setActiveDeck = new SetActiveDeck(nameActiveDeck, 1);
            if (setActiveDeck.check()) return;
            ChoiсeDialog choiсeDialog = new ChoiсeDialog(frame);
            choiсeDialog.hideTag();
            choiсeDialog.Start();
            choiсeDialog.pack();
            choiсeDialog.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    if (choiсeDialog.getStop()) return;
                    if (choiсeDialog.getTypeLearn() == 0) {
                        MemorizeControl memorizeControl = new MemorizeControl(choiсeDialog.getTag(), 1, frame);
                    } else {
                        LearnControl learnControl = new LearnControl(choiсeDialog.getTag(), 1, frame);
                    }
                }
            });
        }
    }

    public class deleteDeckButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            Object nameActiveDeck;
            nameActiveDeck = DeckList.getSelectedValue();
            if (nameActiveDeck == null) {
                ErrorMessageForm error = new ErrorMessageForm("Выберите колоду");
                error.pack();
                return;
            }
            SetActiveDeck setActiveDeck = new SetActiveDeck(nameActiveDeck, 1);
            if (setActiveDeck.check()) return;
            DeleteDeckDialog deleteDeckDialog = new DeleteDeckDialog();
            deleteDeckDialog.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    list.clear();
                    list = listDeck.getDeck();
                    DeckList.setListData(list);
                }
            });
        }
    }

    public class checkDeckButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            Object nameActiveDeck;
            nameActiveDeck = DeckList.getSelectedValue();
            if (nameActiveDeck == null) {
                ErrorMessageForm error = new ErrorMessageForm("Выберите колоду");
                error.pack();
                return;
            }
            SetActiveDeck setActiveDeck = new SetActiveDeck(nameActiveDeck, 1);
            if (setActiveDeck.check()) return;
            DeckControl deckControl = new DeckControl();
            int readyCard = deckControl.getNumberReadyCard();
            deckControl.Close();
            SuccessMessageForm success = new SuccessMessageForm(readyCard + " карточек(-ки) готово к повторению");
            success.pack();
            setActiveDeck = new SetActiveDeck(nameActiveDeck, 0);

        }
    }
}
