package MainForm.Card;

import DataBaseControl.CardControl;
import DataBaseControl.GetCardList;
import DataBaseControl.SetActiveDeck;
import MainForm.ActiveDeck;
import MainForm.ErrorMessageForm;
import MainForm.SuccessMessageForm;

import javax.swing.*;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

public class ViewCardForm extends JFrame {

    private JPanel panel;
    private JButton addNewCardButton;
    private JButton editCardButton;
    private JScrollPane Scroll;
    private JTable table1;
    private JScrollPane scroll;
    private JButton DeleteCardButton;


    Toolkit tk = Toolkit.getDefaultToolkit();
    Dimension screenSize = tk.getScreenSize();

    ArrayList<Card> cards;
    GetCardList getCardList = new GetCardList();
    ActiveDeck activeDeck = new ActiveDeck();
    CardControl cardControl = new CardControl();

    public ViewCardForm() {
        $$$setupUI$$$();
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {

            }

            @Override
            public void windowClosing(WindowEvent e) {
                new SetActiveDeck(activeDeck.getActiveDeck(), 0);
                setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }

            @Override
            public void windowClosed(WindowEvent e) {

            }

            @Override
            public void windowIconified(WindowEvent e) {

            }

            @Override
            public void windowDeiconified(WindowEvent e) {

            }

            @Override
            public void windowActivated(WindowEvent e) {

            }

            @Override
            public void windowDeactivated(WindowEvent e) {

            }
        });

        cards = getCardList.getCard();

        //selection one string of table
        ListSelectionModel lm = new DefaultListSelectionModel();
        lm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table1.setSelectionModel(lm);

        TableModel model = new CardTableModel(cards);
        table1.setModel(model);
        table1.setPreferredScrollableViewportSize(new Dimension(400, 300));

        setContentPane(panel);
        setLocation(screenSize.width / 2 - 165, screenSize.height / 2 - 210);
        setVisible(true);
        this.editCardButton.addActionListener(new editCardButtonListener());
        this.addNewCardButton.addActionListener(new addNewCardButtonListener());
        this.DeleteCardButton.addActionListener(new deleteCardButtonListener());
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel.setMaximumSize(new Dimension(337, 109));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        addNewCardButton = new JButton();
        addNewCardButton.setText("Добавить новую карточку");
        panel.add(addNewCardButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        editCardButton = new JButton();
        editCardButton.setText("Редактировать карточку");
        panel.add(editCardButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scroll = new JScrollPane();
        panel.add(scroll, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        scroll.setViewportView(table1);
        DeleteCardButton = new JButton();
        DeleteCardButton.setText("Удалить карточку");
        panel.add(DeleteCardButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    public class editCardButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            if (table1.getSelectedRow() == -1) {
                ErrorMessageForm error = new ErrorMessageForm("Выберите карточку");
                error.pack();
                return;
            }
            Card selectedCard = cards.get(table1.getSelectedRow());
            EditCardForm editCardForm = new EditCardForm(selectedCard);
            editCardForm.pack();
            editCardForm.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    cards.clear();
                    cards = getCardList.getCard();
                    table1.updateUI();
                }

            });
        }
    }

    public class addNewCardButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            EditCardForm editCardForm = new EditCardForm();
            editCardForm.pack();
            editCardForm.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    cards.clear();
                    cards = getCardList.getCard();
                    table1.updateUI();
                }

            });
        }
    }


    public class deleteCardButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            if (table1.getSelectedRow() == -1) {
                ErrorMessageForm error = new ErrorMessageForm("Выберите карточку");
                error.pack();
                return;
            }
            Card selectedCard = cards.get(table1.getSelectedRow());
            cardControl.DeleteCard(selectedCard);
            if (cardControl.check()) {
                ErrorMessageForm error = new ErrorMessageForm("Карточка не удалена");
                error.pack();
            } else {
                SuccessMessageForm success = new SuccessMessageForm("Карточка удалена");
                success.pack();
            }
            cards.clear();
            cards = getCardList.getCard();
            table1.updateUI();
        }
    }

}
